# Define an array of website URLs to check for SSL certificates.
$Websites = @("www.microsoft.com", "google.com", "fireeye.com")

# Create an empty ArrayList to store the certificate information for each website.
[System.Collections.ArrayList]$output = @()

# Loop through each website in the $Websites array.
foreach ($Website in $Websites) {
    # Create a new TCP client to establish a connection to the website on port 443 (HTTPS).
    $request = [System.Net.Sockets.TcpClient]::new($Website, '443')

    # Create an SSL stream for secure communication over the established TCP connection.
    $stream = [System.Net.Security.SslStream]::new($request.GetStream())

    # Authenticate the SSL stream as a client, specifying the website as the target, using TLS 1.0, 1.2, and 1.3 protocols, and no client certificate.
    $stream.AuthenticateAsClient($Website, $null, [System.Net.SecurityProtocolType]'Tls, Tls12, Tls13', $false)

    # Create a custom object to store information about the website's SSL certificate.
    $x = [pscustomobject] @{
        Website                 = $Website
        CertIssuer              = $stream.RemoteCertificate.Issuer
        CertSubject             = $stream.RemoteCertificate.subject
        Thumbprint              = $stream.RemoteCertificate.GetCertHashString()
        StartDate               = $stream.RemoteCertificate.GetEffectiveDateString()
        ExpirationDate          = $stream.RemoteCertificate.GetExpirationDateString()
        Format                  = $stream.RemoteCertificate.GetType().name
        KeyAlgorithm            = $stream.RemoteCertificate.GetKeyAlgorithm()
        CertificateSerialNumber = $stream.RemoteCertificate.GetSerialNumberString()
    }
    
    # Add the custom object representing the website's certificate to the $output ArrayList.
    $output += $x

    # Close the TCP connection to the website.
    $request.Close()
}

$output
